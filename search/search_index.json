{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#lsldictionaries","title":"LSL.Dictionaries","text":"<p>Helpers for dictionaries. Currently supports mapping an object to a dictionary and a dictionary into an object.</p>"},{"location":"#assumed-class-definitions","title":"Assumed class definitions","text":"<p>The following quick start examples assume the following class definitions have been defined:</p> <pre><code>public class MyObject\n{\n    public int AValue { get; set; }\n    public Inner Inner { get; set; } = new Inner();\n}\n\npublic class Inner\n{\n    public string Name { get; set; }\n}\n</code></pre>"},{"location":"#object-extensions","title":"Object Extensions","text":"<p>Convert an object to a dictionary using the <code>ToDictionary()</code> object extensions method.</p> <pre><code>using LSL.Dictionaries.Extensions;\n...\nvar theDictionary = new MyObject()\n    {\n        AValue = 12,\n        Inner = new Inner\n        {\n            Name = \"Als\"\n        }\n    }\n    .ToDictionary();\n\n/*\n    theDictionary will contain:\n\n    [\"AValue\"] = 12\n    [\"Inner\"] = new Dictionary&lt;string, object&gt;\n    {\n        [\"Name\"] = \"Als\"\n    }\n*/\n</code></pre>"},{"location":"#dictionary-extensions","title":"Dictionary Extensions","text":"<p>Convert an <code>IDictionary&lt;string, object&gt;</code> to an object:</p> <pre><code>using LSL.Dictionaries.Extensions;\n...\n\nvar theObject = new Dictionary&lt;string, object&gt;\n{\n    [\"AValue\"] = 12,\n    [\"Inner\"] = new Dictionary&lt;string, object&gt;\n    {\n        [\"Name\"] = \"Als\"\n    }\n}.ToObject&lt;MyObject&gt;();\n\n/*\n    theObject will be:\n    {\n        AValue = 12,\n        Inner = {\n            Name = \"Als\"\n        }\n    }\n*/\n</code></pre>"},{"location":"ToDictionary/01-basic/","title":"Quick Start","text":"<p>When no configuration is provided the defaults are as follows:</p> Option Behaviour Property Filter All <code>public</code> properties are added to the dictionary Value Mapping The value of the property is added to the dictionary with no transformation Property Name Provider The default property name provider sets the dictionary key to the name of the property Complex Type Checker The default complex type checker does the following: <code>type.IsClass &amp;&amp; !type.IsAssignableFrom(typeof(string)) &amp;&amp; !typeof(IEnumerable).IsAssignableFrom(type)</code> <p>The following code would will just use the default configuration when converting an object to a dictionary.</p> <pre><code>var dictionary = new MyObject()\n{\n    AValue = 12\n}\n.ToDictionary();\n\n// This will result in a dictionary containing:\n// [\"AValue\"] = 12\n</code></pre>"},{"location":"ToDictionary/02-custom-property-filter/","title":"Custom property filter","text":"<p>Sometimes it is desirable to omit certain properties and these can be filtered as shown below:</p> <p>Note</p> <p>The <code>propertyInfo</code> parameter passed into the delegate provides full information about the property that is potentially being added to the dictionary</p> <p>The <code>value</code> parameter is the value of the property.</p> <pre><code>var dictionary = new MyObject()\n    .ToDictionary(c =&gt; c.\n        WithPropertyFilter((propertyInfo, value) =&gt; \n            propertyInfo.Name != \"AValue\"));\n\n// dictionary will be empty as MyObject only has AValue as a property\n</code></pre>"},{"location":"ToDictionary/03-custom-value-mapping/","title":"Custom value mapping","text":"<p>When mapping a value from an object's property it may be desirable to format the value prior to it being added to the dictionary. The following example shows a simple value mapper that will format a date time as <code>dd-MMM-yyyy</code></p> <p>Note</p> <p>The <code>propertyInfo</code> parameter passed into the delegate provides full information about the property whose value will be added to the dictionary.</p> <p>The <code>value</code> parameter is the value of the property.</p> <pre><code>var dictionary = new MyObject()\n    .ToDictionary(c =&gt; c\n        .WithValueMapper((propertyInfo, value) =&gt; value switch\n        {\n            DateTime dateValue =&gt; dateValue.ToString(\"dd-MMM-yyyy\"),\n            _ =&gt; value                      \n        }));\n\n// Any DateTime properties will be formatted as configured above.\n// e.g. 12-Mar-2010 for DateTime(2010, 3, 12)\n</code></pre>"},{"location":"ToDictionary/04-custom-property-name/","title":"Custom property name provider","text":"<p>Sometimes it is desirable to omit certain properties and these can be filtered as shown below:</p> <p>Note</p> <p>The <code>propertyInfo</code> parameter passed into the delegate provides full information about the property in order to make an informed decision about what the property name should be.</p> <p>You could get information from custom attributes on the property to further drive your choice of property name.</p> <pre><code>var dictionary = new MyObject()\n    .ToDictionary(c =&gt; c.\n        WithPropertyNameProvider(propertyInfo =&gt; \n            $\"MyPrefix_{propertyInfo.Name}\"));\n\n// This will result in a dictionary containing:\n// [\"MyPrefix_AValue\"] = 0\n</code></pre>"},{"location":"ToObject/01-basic/","title":"Quick Start","text":"<p>When no configuration is provided the defaults are as follows:</p> Option Behaviour Property Filter All <code>public</code> properties are set on the object if found in the dictionary Value Mapping The value from the dictionary sets the property on the object with no transformation Property Name Provider The default property name provider sets the dictionary key to the name of the property Instance Factory The default object instance factory uses <code>Activator.CreateInstance</code> <p>The following code would will just use the default configuration when converting an object to a dictionary.</p> <pre><code>var theObject = new Dictionary&lt;string, object&gt;\n{\n    [\"AValue\"] = 12\n}\n.ToObject&lt;MyObject&gt;();\n\n// theObject will have AValue set to 12\n</code></pre>"},{"location":"ToObject/02-custom-property-filter/","title":"Custom property filter","text":"<p>Sometimes it is desirable to omit certain properties and these can be filtered as shown below:</p> <p>Note</p> <p>The <code>propertyInfo</code> parameter passed into the delegate provides full information about the property that is potentially being added to the dictionary</p> <p>The <code>value</code> parameter is the value of the property.</p> <pre><code>var theObject = new Dictionary&lt;string, object&gt;\n{\n    [\"AValue\"] = 12\n}\n.ToObject&lt;MyObject&gt;(c =&gt; c.\n    WithPropertyFilter((propertyInfo, value) =&gt; \n        propertyInfo.Name != \"AValue\"));\n\n// This will result in a MyObject instance with AValue as 0 \n// because we have told it to ignore properties with the name AValue\n</code></pre>"},{"location":"ToObject/03-custom-value-mapping/","title":"Custom value mapping","text":"<p>When mapping a value from dictionary's value it may be desirable to format the value prior to it being set on the object. The following example shows a simple value mapper that will double any integer values that go into an object's <code>int</code> properties</p> <p>Note</p> <p>The <code>propertyInfo</code> parameter passed into the delegate provides full information about the property whose value will be added to the dictionary.</p> <p>The <code>value</code> parameter is the value of the property.</p> <pre><code>var theObject = new Dictionary&lt;string, object&gt;\n{\n    [\"AValue\"] = 12\n}\n.ToObject&lt;MyObject&gt;(c =&gt; c\n    .WithValueMapper((propertyInfo, value) =&gt; value switch\n    {\n        int intValue =&gt; intValue * 2,\n        _ =&gt; value                      \n    }));\n\n// theObject's AValue property will be 24\n</code></pre>"},{"location":"ToObject/04-custom-property-name/","title":"Custom property name provider","text":"<p>You may have a dictionary whose key names do not match properties on the object. This method allows you to provide a custom dictionary key.</p> <p>Note</p> <p>The <code>propertyInfo</code> parameter passed into the delegate provides full information about the property in order to make an informed decision about what the dictionary key  to lookup should be (for a specific property of the target object) </p> <p>You could get information from custom attributes on the property to further drive your choice of dictionary key.</p> <pre><code>var theObject = new Dictionary&lt;string, object&gt;\n{\n    [\"Prefix_AValue\"] = 12\n}\n.ToObject&lt;MyObject&gt;(c =&gt; c.\n    WithPropertyNameProvider(propertyInfo =&gt; \n        $\"Prefix_{propertyInfo.Name}\"));\n\n// This will result in an instance of MyObject with AValue set to 12\n</code></pre>"},{"location":"ToObject/05-custom-instance-factory/","title":"Custom instance factory","text":"<p>You may wish to provide a custom object instance factory. The example below shows how to achieve this.</p> <p>Note</p> <p>In this example we are just using what the default configuration uses: <code>Activator.CreateInstance</code></p> <pre><code>var theObject = new Dictionary&lt;string, object&gt;\n{\n    [\"AValue\"] = 12\n}\n.ToObject&lt;MyObject&gt;(c =&gt; c\n    .WithInstanceFactory(Activator.CreateInstance));\n\n// This will result in an instance of MyObject with AValue set to 12\n</code></pre>"}]}